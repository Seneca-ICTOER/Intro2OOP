"use strict";(self.webpackChunkoop345=self.webpackChunkoop345||[]).push([[165],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?i.createElement(f,l(l({ref:t},p),{},{components:n})):i.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8891:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return d}});var i=n(3117),a=(n(7294),n(3905));const r={id:"standard-library-functions",title:"Standard Library Functions",sidebar_position:1,description:"TBD"},l="Standard Library Functions",o={unversionedId:"Resources-Appendices/standard-library-functions",id:"Resources-Appendices/standard-library-functions",title:"Standard Library Functions",description:"TBD",source:"@site/docs/Resources-Appendices/standard-library-functions.md",sourceDirName:"Resources-Appendices",slug:"/Resources-Appendices/standard-library-functions",permalink:"/Resources-Appendices/standard-library-functions",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/Intro2OOP/tree/main/docs/Resources-Appendices/standard-library-functions.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"standard-library-functions",title:"Standard Library Functions",sidebar_position:1,description:"TBD"},sidebar:"courseNotesSidebar",previous:{title:"Language Standards",permalink:"/F-Refinements/language-standards"},next:{title:"ASCII Collating Sequence",permalink:"/Resources-Appendices/ascii-collating-sequence"}},s={},d=[{value:"C Library",id:"c-library",level:2},{value:"<code>&lt;cstdio&gt;</code> - Standard and File Input Output",id:"cstdio---standard-and-file-input-output",level:3},{value:"<code>&lt;cstring&gt;</code> - C-Style Null-Terminated Strings",id:"cstring---c-style-null-terminated-strings",level:3},{value:"<code>&lt;cstdlib&gt;</code> - General Utilities",id:"cstdlib---general-utilities",level:3},{value:"<code>&lt;cmath&gt;</code> - Numerics",id:"cmath---numerics",level:3},{value:"<code>&lt;cctype&gt;</code> - Character Handling",id:"cctype---character-handling",level:3},{value:"Input Output Library",id:"input-output-library",level:2},{value:"<code>&lt;iostream&gt;</code> - Standard Input Output Objects",id:"iostream---standard-input-output-objects",level:3},{value:"<code>&lt;iomanip&gt;</code> - Parametric Manipulators",id:"iomanip---parametric-manipulators",level:3},{value:"<code>&lt;fstream&gt;</code> - File Input Output Objects",id:"fstream---file-input-output-objects",level:3}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"standard-library-functions"},"Standard Library Functions"),(0,a.kt)("p",null,"The prototypes for the some common functions in the C++ standard library are listed below. These prototypes and the functions definitions are declared within the ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," namespace. To access one of these functions, we ",(0,a.kt)("inlineCode",{parentName:"p"},"#include")," its parent header file and either expose the entire namespace (",(0,a.kt)("inlineCode",{parentName:"p"},"using namespace std;"),") or add the ",(0,a.kt)("inlineCode",{parentName:"p"},"std::")," prefix to the function identifier."),(0,a.kt)("h2",{id:"c-library"},"C Library"),(0,a.kt)("h3",{id:"cstdio---standard-and-file-input-output"},(0,a.kt)("inlineCode",{parentName:"h3"},"<cstdio>")," - Standard and File Input Output"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int scanf(const char* format, ...)"),": Read data from standard input"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int printf(const char* format, ...)"),": Send data to standard output"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int fscanf(FILE* stream, const char* format, ...)"),": Read data from a file stream"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int fprintf(FILE* stream, const char* format, ...)"),": Send data to a file stream")),(0,a.kt)("h3",{id:"cstring---c-style-null-terminated-strings"},(0,a.kt)("inlineCode",{parentName:"h3"},"<cstring>")," - C-Style Null-Terminated Strings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size_t"),": Non-negative integer type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"size_t strlen(const char* str)"),": The number of characters in a C-style null-terminated string"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"char* strcpy(char* destination, const char* source)"),": Copy C-style null-terminated string from ",(0,a.kt)("inlineCode",{parentName:"li"},"source")," address to ",(0,a.kt)("inlineCode",{parentName:"li"},"destination")," address"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"char* strcat(char* destination, const char* source)"),": Concatenate C-style null-terminated string from ",(0,a.kt)("inlineCode",{parentName:"li"},"source")," address to the string at the ",(0,a.kt)("inlineCode",{parentName:"li"},"destination")," address"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int strcmp(const char* str1, const char* str2)"),": Compare C-style null-terminated strings at two addresses")),(0,a.kt)("h3",{id:"cstdlib---general-utilities"},(0,a.kt)("inlineCode",{parentName:"h3"},"<cstdlib>")," - General Utilities"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int abs(int i)"),": Absolute value of ",(0,a.kt)("inlineCode",{parentName:"li"},"i")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int atoi(const char* str)"),": Convert C-style null-terminated string (",(0,a.kt)("inlineCode",{parentName:"li"},"str"),") to an integer"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int rand()"),": Generate a random number")),(0,a.kt)("h3",{id:"cmath---numerics"},(0,a.kt)("inlineCode",{parentName:"h3"},"<cmath>")," - Numerics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"double abs(double x)"),": Absolute value of ",(0,a.kt)("inlineCode",{parentName:"li"},"x")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"float abs(float x)"),": Absolute value of ",(0,a.kt)("inlineCode",{parentName:"li"},"x")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"double pow(double base, double exponent)"),": Raises ",(0,a.kt)("inlineCode",{parentName:"li"},"base")," to the power of ",(0,a.kt)("inlineCode",{parentName:"li"},"exponent")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"double sqrt(double x)"),": Square root of ",(0,a.kt)("inlineCode",{parentName:"li"},"x"))),(0,a.kt)("h3",{id:"cctype---character-handling"},(0,a.kt)("inlineCode",{parentName:"h3"},"<cctype>")," - Character Handling"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int toupper(int c)"),": Converts ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," to upper case"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int tolower(int c)"),": Converts ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," to lower case"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int isupper(int c)"),": Is ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," upper case?"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int islower(int c)"),": Is ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," lower case?"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int isalpha(int c)"),": Is ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," alphabetic?"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int isdigit(int c)"),": Is ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," a numeric digit?")),(0,a.kt)("h2",{id:"input-output-library"},"Input Output Library"),(0,a.kt)("h3",{id:"iostream---standard-input-output-objects"},(0,a.kt)("inlineCode",{parentName:"h3"},"<iostream>")," - Standard Input Output Objects"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"streamsize"),": Integer type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fmtflags"),": Format flags type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"char fill(char c)"),": Set fill character to ",(0,a.kt)("inlineCode",{parentName:"li"},"c")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fmtflags setf(fmtflags f)"),": Set format to ",(0,a.kt)("inlineCode",{parentName:"li"},"f")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fmtflags unsetf(fmtflags f)"),": Unset format for ",(0,a.kt)("inlineCode",{parentName:"li"},"f")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"streamsize width(streamsize w)"),": Set field width to ",(0,a.kt)("inlineCode",{parentName:"li"},"w")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"streamsize precision(streamsize p)"),": Set floating-point precision to ",(0,a.kt)("inlineCode",{parentName:"li"},"p")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool good() const"),": Good bit is set"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool eof() const"),": End of file bit is set"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool fail() const"),": Fail file bit is set"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool bad() const"),": Bad bit is set"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool eof() const"),": End of file bit is set"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void clear()"),": Set error state to good")),(0,a.kt)("h3",{id:"iomanip---parametric-manipulators"},(0,a.kt)("inlineCode",{parentName:"h3"},"<iomanip>")," - Parametric Manipulators"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setfill(char c)"),": Set fill character to ",(0,a.kt)("inlineCode",{parentName:"li"},"c")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setw(int w)"),": Set field width to ",(0,a.kt)("inlineCode",{parentName:"li"},"w")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setprecision(int p)"),": Set floating-point precision to ",(0,a.kt)("inlineCode",{parentName:"li"},"p"))),(0,a.kt)("h3",{id:"fstream---file-input-output-objects"},(0,a.kt)("inlineCode",{parentName:"h3"},"<fstream>")," - File Input Output Objects"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void open(const char* f, ...)"),": Open file named ",(0,a.kt)("inlineCode",{parentName:"li"},"f")," and associate it with the current object"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void close()"),": Close file associated with current object")))}c.isMDXComponent=!0}}]);