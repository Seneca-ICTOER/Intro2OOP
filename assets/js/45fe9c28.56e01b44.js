"use strict";(self.webpackChunkoop345=self.webpackChunkoop345||[]).push([[463],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=d(n),u=a,k=s["".concat(l,".").concat(u)]||s[u]||m[u]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[s]="string"==typeof e?e:a,o[1]=p;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},629:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return s},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var r=n(3117),a=(n(7294),n(3905));const i={id:"operator-precedence",title:"Operator Precedence",sidebar_position:3,description:"TBD"},o="Operator Precedence",p={unversionedId:"Resources-Appendices/operator-precedence",id:"Resources-Appendices/operator-precedence",title:"Operator Precedence",description:"TBD",source:"@site/docs/Resources-Appendices/operator-precedence.md",sourceDirName:"Resources-Appendices",slug:"/Resources-Appendices/operator-precedence",permalink:"/Resources-Appendices/operator-precedence",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/Intro2OOP/tree/main/docs/Resources-Appendices/operator-precedence.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"operator-precedence",title:"Operator Precedence",sidebar_position:3,description:"TBD"},sidebar:"courseNotesSidebar",previous:{title:"ASCII Collating Sequence",permalink:"/Resources-Appendices/ascii-collating-sequence"},next:{title:"Relation Between C++ and C",permalink:"/Resources-Appendices/relation-between-cpp-and-c"}},l={},d=[],c={toc:d};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operator-precedence"},"Operator Precedence"),(0,a.kt)("p",null,"The precedence order of the operators covered in these notes is important in the evaluation of compound expressions. A compound expression consists of several sub-expressions. Different orders of evaluation are possible in such expressions. That is, the results of evaluating the entire compound expression depend on the order of evaluating its sub-expressions."),(0,a.kt)("p",null,"To ensure unique evaluation of all compound expressions, C++ defines rules of precedence on the operators in a compound expression. This order is from top to bottom in the table shown below. The operators associate operands in each sub-expression as noted in the right column, mostly from left to right."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Associate From"),(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"::")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"[ ]")," ",(0,a.kt)("inlineCode",{parentName:"td"},".")," ",(0,a.kt)("inlineCode",{parentName:"td"},"->")," ",(0,a.kt)("inlineCode",{parentName:"td"},"++")," (postfix) ",(0,a.kt)("inlineCode",{parentName:"td"},"--")," (postfix)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"++")," (prefix) ",(0,a.kt)("inlineCode",{parentName:"td"},"--")," (prefix) ",(0,a.kt)("inlineCode",{parentName:"td"},"+")," ",(0,a.kt)("inlineCode",{parentName:"td"},"-")," ",(0,a.kt)("inlineCode",{parentName:"td"},"&")," ",(0,a.kt)("inlineCode",{parentName:"td"},"!")," (all unary) ",(0,a.kt)("inlineCode",{parentName:"td"},"new")," ",(0,a.kt)("inlineCode",{parentName:"td"},"new[]")," ",(0,a.kt)("inlineCode",{parentName:"td"},"delete")," ",(0,a.kt)("inlineCode",{parentName:"td"},"delete[]")," ",(0,a.kt)("inlineCode",{parentName:"td"},"(type)"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"type()")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Right to left"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},".*")," ",(0,a.kt)("inlineCode",{parentName:"td"},"->*")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"*")," ",(0,a.kt)("inlineCode",{parentName:"td"},"/")," ",(0,a.kt)("inlineCode",{parentName:"td"},"%")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"+")," ",(0,a.kt)("inlineCode",{parentName:"td"},"-")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},">>")," ",(0,a.kt)("inlineCode",{parentName:"td"},"<<")),(0,a.kt)("td",{parentName:"tr",align:"center"},"left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"<")," ",(0,a.kt)("inlineCode",{parentName:"td"},"<=")," ",(0,a.kt)("inlineCode",{parentName:"td"},">")," ",(0,a.kt)("inlineCode",{parentName:"td"},">=")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"==")," ",(0,a.kt)("inlineCode",{parentName:"td"},"!=")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"&&")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"`"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:null},"`"),(0,a.kt)("td",{parentName:"tr",align:null},"Left to right")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"=")," ",(0,a.kt)("inlineCode",{parentName:"td"},"+=")," ",(0,a.kt)("inlineCode",{parentName:"td"},"-=")," ",(0,a.kt)("inlineCode",{parentName:"td"},"*=")," ",(0,a.kt)("inlineCode",{parentName:"td"},"/=")," ",(0,a.kt)("inlineCode",{parentName:"td"},"%=")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Right to left"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},"?:")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("inlineCode",{parentName:"td"},",")),(0,a.kt)("td",{parentName:"tr",align:"center"},"Left to right"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("p",null,"The scope resolution operator ",(0,a.kt)("inlineCode",{parentName:"p"},"::")," has the highest precedence. An expression containing this operator is always evaluated first."),(0,a.kt)("p",null,"We can change the order of evaluation within a compound expression by enclosing a sub-expression in parentheses. That is, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"(sub-expression)")," to evaluate ",(0,a.kt)("inlineCode",{parentName:"p"},"sub-expression")," before applying the rules of precedence to the entire expression."),(0,a.kt)("p",null,"For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"  2 + 3  * 5 evaluates to 2 + 15 which evaluates to 17.\n (2 + 3) * 5 evaluates to 5 * 5  which evaluates to 25.\n")))}s.isMDXComponent=!0}}]);